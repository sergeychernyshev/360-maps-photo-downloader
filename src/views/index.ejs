<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Google Maps 360 Photo Downloader</title>
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
          Helvetica, Arial, sans-serif;
        line-height: 1.6;
        padding: 2em;
        margin: auto;
        background: #f7f7f7;
      }
      .container {
        background: white;
        padding: 2em;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      }
      h1 {
        color: #333;
      }
      .button,
      button {
        display: inline-block;
        text-decoration: none;
        background: #4285f4;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        font-size: 16px;
        margin-right: 10px;
        line-height: 1.5;
        box-sizing: border-box;
        white-space: nowrap;
      }
      a {
        color: #4285f4;
        text-decoration: underline;
      }
      a.button {
        color: white;
        text-decoration: none;
      }
      .sort-link {
        background: none;
        color: #4285f4;
        padding: 0;
        border-radius: 0;
        border: none;
        font-size: inherit;
        margin: 0;
        line-height: inherit;
        text-decoration: underline;
      }
      a.logout {
        background: #db4437;
      }
      a.cancel {
        background: #6c757d;
      }
      .download-btn {
        background-color: #34a853;
      }
      .redownload-btn {
        background-color: #c0c0c0;
      }
      #cancel-btn {
        background: #db4437;
        height: 1.5em;
        line-height: 1;
        align-self: flex-end;
        margin-bottom: 1em;
      }
      .update-btn {
        background: #34a853;
      }
      table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 1.5em;
        margin-bottom: 1.5em;
        table-layout: fixed;
      }
      th,
      td {
        text-align: left;
        padding: 10px;
        border-bottom: 1px solid #ddd;
        font-size: 14px;
      }
      th {
        background-color: #f2f2f2;
        white-space: nowrap;
      }
      td:first-child {
        font-family: monospace;
        font-size: 12px;
        max-width: 200px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }
      .status {
        padding: 4px 10px;
        border-radius: 12px;
        font-size: 12px;
        color: white;
        font-weight: 500;
        white-space: nowrap;
      }
      .status-icon {
        display: none;
      }
      .button-icon {
        display: none;
      }
      @media (max-width: 768px) {
        .status-text, .button-text {
          display: none;
        }
        .status-icon, .button-icon {
          display: inline;
        }
      }
      .status.downloaded {
        background-color: #34a853;
      }
      .status.not-downloaded {
        background-color: #ea4335;
      }
      .pagination {
        margin-top: 1em;
        text-align: center;
      }
      .pagination a,
      .pagination span {
        color: #4285f4;
        padding: 8px 16px;
        text-decoration: none;
        background: white;
        border: 1px solid #ddd;
        margin: 0 2px;
      }
      .pagination button {
        color: #4285f4;
        padding: 8px 16px;
        text-decoration: none;
        background: white;
        border: 1px solid #ddd;
        margin: 0 2px;
        cursor: pointer;
      }
      .pagination button:hover {
        background-color: #f1f1f1;
      }
      .pagination button:disabled {
        background-color: #f1f1f1;
        cursor: default;
      }
      .pagination a:hover {
        background-color: #f1f1f1;
      }
      .pagination span {
        border: 1px solid transparent;
      }
      .spinner {
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-top: 4px solid #fff;
        border-radius: 50%;
        width: 16px;
        height: 16px;
        animation: spin 1s linear infinite;
        display: inline-block;
        vertical-align: middle;
        margin-right: 10px;
      }
      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
      button:disabled {
        opacity: 0.7;
        cursor: not-allowed;
      }
      .search-container {
        position: relative;
        flex-grow: 1;
      }
      #clear-search-btn {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        padding: 5px;
        line-height: 1;
        font-size: 12px;
        margin: 0;
      }
      form input[type="text"] {
        flex-grow: 1;
        margin-right: 10px;
        padding: 9px 10px;
        font-size: 16px;
        line-height: 1.5;
        border-radius: 5px;
        border: 1px solid #ddd;
        box-sizing: border-box;
      }
      .status-filter {
        margin-top: 1em;
        margin-bottom: 1em;
      }
      .status-filter span {
      }
      .status-filter a {
        margin-right: 10px;
        text-decoration: none;
        padding: 5px 10px;
        border-radius: 5px;
      }
      .status-filter a.active {
        background-color: #f2f2f2;
        font-weight: bold;
      }
      .status-filter a.has-count {
        padding-right: 5px;
      }
      .progress-bar-container {
        width: 100%;
        background-color: #f3f3f3;
        border-radius: 5px;
        margin: 1em 0;
      }
      .progress-bar {
        width: 0%;
        height: 1.5em;
        background-color: #4caf50;
        text-align: center;
        line-height: 1.5em;
        color: white;
        border-radius: 5px;
      }
      #progress-text {
        margin-top: 10px;
        display: none;
      }
      .accordion {
        background-color: #eee;
        color: #444;
        cursor: pointer;
        padding: 18px;
        width: 100%;
        border: none;
        text-align: left;
        outline: none;
        font-size: 15px;
        transition: 0.4s;
      }

      .active,
      .accordion:hover {
        background-color: #ccc;
      }

      .panel {
        padding: 0 18px;
        background-color: white;
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.2s ease-out;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>Google Maps 360 Photo Downloader</h1>
      <% if (isLoggedIn) { %>
      <h2>
        <%= totalPhotos %> Street View Photos Found, and <%= drivePhotoCount %>
        on Google Drive
      </h2>
      <% } else { %>
      <p>
        Please log in with your Google account to download or update photos.
      </p>
      <a href="/login" class="button">Login with Google</a>
      <% } %> <% if (totalPhotos > 0) { %> <% if (isLoggedIn) { %>
      <p>
        This is a list of your 360 photos on Google Maps. It indicates which
        ones have already been backed up to the
        <code
          ><% if (locals.folderLink) { %>
          <a href="<%= folderLink %>" target="_blank"><%= folderName %></a>
          <% } else {%> <%= folderName %> <% } %>
        </code>
        directory in your Google Drive.
      </p>
      <% if (driveOnlyCount > 0) { %>
      <p>
        There are <%= driveOnlyCount %> photos in your Google Drive folder that
        are no longer listed in Google Street View.
        <button
          id="toggle-drive-only-list"
          class="button"
          style="font-size: 12px; padding: 5px 10px; margin-left: 10px"
        >
          Show/Hide List
        </button>
      </p>
      <div id="drive-only-list" class="panel">
        <ul>
          <% driveOnlyFiles.forEach(file => { %>
          <li>
            <a href="<%= file.webViewLink %>" target="_blank"
              ><%= file.name %></a
            >
          </li>
          <% }); %>
        </ul>
      </div>
      <% } %>
      <% if (duplicateFilesCount > 0) { %>
        <p>
          There are <%= duplicateFilesCount %> files with duplicate names in your Google Drive folder.
          <button id="toggle-duplicate-files-list" class="button" style="font-size: 12px; padding: 5px 10px; margin-left: 10px;">Show/Hide List</button>
          <button id="delete-duplicate-files" class="button" style="font-size: 12px; padding: 5px 10px; margin-left: 10px; background-color: #db4437;">Delete Duplicates</button>
        </p>
        <div id="duplicate-files-list" class="panel">
          <ul>
            <% Object.keys(duplicateFiles).forEach(filename => { %>
              <li>
                <strong><%= filename %></strong>
                <ul>
                  <% duplicateFiles[filename].forEach(file => { %>
                    <li><a href="<%= file.webViewLink %>" target="_blank"><%= file.name %></a> (ID: <%= file.id %>)</li>
                  <% }); %>
                </ul>
              </li>
            <% }); %>
          </ul>
        </div>
      <% } %>
      <button onclick="confirmDownload()">Download All Missing Photos</button>
      <button id="update-btn" onclick="updatePhotoList()" class="update-btn">
        Update the List of Photos
      </button>
      <a href="/logout" class="logout button">Logout</a>

      <div id="download-progress" style="display: none">
        <h2>Downloading Photos</h2>
        <p id="progress-text">Starting...</p>
        <p>Total Progress:</p>
        <div style="display: flex; align-items: center; gap: 1em">
          <div style="flex-grow: 1">
            <div class="progress-bar-container">
              <div id="total-progress-bar" class="progress-bar">0%</div>
            </div>
          </div>
          <button
            id="cancel-btn"
            onclick="cancelDownload()"
            class="button cancel"
          >
            Cancel
          </button>
        </div>
        <div style="display: flex; gap: 1em">
          <div style="flex-grow: 1">
            <p>Downloading 360 photos from Google Maps:</p>
            <div class="progress-bar-container">
              <div id="download-bar" class="progress-bar">0%</div>
            </div>
          </div>
          <div style="flex-grow: 1">
            <p>Uploading to Google Drive:</p>
            <div class="progress-bar-container">
              <div id="upload-bar" class="progress-bar">0%</div>
            </div>
          </div>
        </div>
      </div>
      <% } %>

      <form
        action="javascript:searchPhotos()"
        style="margin-top: 1em; display: flex; align-items: center"
      >
        <div class="search-container">
          <input
            type="text"
            id="search-input"
            name="search"
            placeholder="Search by place name..."
            value="<%= locals.search || '' %>"
            onkeyup="toggleClearButton()"
          />
          <button type="button" onclick="clearSearch()" class="cancel button" id="clear-search-btn" style="display: none;">Clear</button>
        </div>
        <button type="submit">Search</button>
      </form>

      <% if (isLoggedIn) { %>
      <div class="status-filter">
        <span>Filter by status:</span>
        <a
          id="filter-all"
          href="javascript:filterPhotos('all')"
          class="<%= status === 'all' ? 'active' : '' %> has-count"
          >All (<span id="all-count"><%= totalPhotosCount %></span>)</a
        >
        <a
          id="filter-downloaded"
          href="javascript:filterPhotos('downloaded')"
          class="<%= status === 'downloaded' ? 'active' : '' %> has-count"
          >Downloaded (<span id="downloaded-count"><%= downloadedCount %></span
          >)</a
        >
        <a
          id="filter-not-downloaded"
          href="javascript:filterPhotos('not-downloaded')"
          class="<%= status === 'not-downloaded' ? 'active' : '' %> has-count"
          >Not Downloaded (<span id="not-downloaded-count"
            ><%= notDownloadedCount %></span
          >)</a
        >
      </div>
      <% } %>

      <table>
        <thead>
          <tr>
            <th>Photo ID</th>
            <th>Location</th>
            <th>
              <%- buildSortLink("date", "Capture Time") %>
            </th>
            <th>
              <%- buildSortLink("views", "View Count") %>
            </th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <%- photoListHtml %>
        </tbody>
      </table>
      <%- paginationHtml %> <% } else if (isLoggedIn) { %>
      <p>You do not have any photos uploaded 360 photos to Google Maps.</p>
      <button id="update-btn" onclick="updatePhotoList()" class="update-btn">
        Check for new photos
      </button>
      <a href="/logout" class="logout button">Logout</a>
      <% } %>
    </div>

    <script>
      let ws;

      function filterPhotos(status) {
        document.getElementById('filter-all').classList.remove('active');
        document.getElementById('filter-downloaded').classList.remove('active');
        document.getElementById('filter-not-downloaded').classList.remove('active');
        document.getElementById(`filter-${status}`).classList.add('active');

        connectWebSocket();
        if (ws && ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify({ type: 'filter-photos', payload: { status } }));
        } else {
          ws.onopen = () => {
            ws.send(JSON.stringify({ type: 'filter-photos', payload: { status } }));
          };
        }
      }

      function clearSearch() {
        document.getElementById('search-input').value = '';
        searchPhotos();
      }

      function searchPhotos() {
        const search = document.getElementById('search-input').value;
        connectWebSocket();
        if (ws && ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify({ type: 'search-photos', payload: { search } }));
        } else {
          ws.onopen = () => {
            ws.send(JSON.stringify({ type: 'search-photos', payload: { search } }));
          };
        }
      }

      function changePage(page) {
        connectWebSocket();
        if (ws && ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify({ type: 'change-page', payload: { page } }));
        } else {
          ws.onopen = () => {
            ws.send(JSON.stringify({ type: 'change-page', payload: { page } }));
          };
        }
      }

      function connectWebSocket() {
        if (ws && ws.readyState === WebSocket.OPEN) {
          return;
        }

        const downloadBar = document.getElementById("download-bar");
        const uploadBar = document.getElementById("upload-bar");
        const totalProgressBar = document.getElementById("total-progress-bar");
        const progressText = document.getElementById("progress-text");

        ws = new WebSocket(`ws://${window.location.host}`);

        ws.onopen = () => {
          console.log("WebSocket connection established.");
        };

        ws.onmessage = (event) => {
          const data = JSON.parse(event.data);

          if (data.type === 'filter-results') {
            const { photoListHtml, paginationHtml } = data.payload;
            document.querySelector('tbody').innerHTML = photoListHtml;
            document.querySelector('.pagination').innerHTML = paginationHtml;
            return;
          }

          if (data.type === 'search-results') {
            const { photoListHtml, paginationHtml, downloadedCount, notDownloadedCount, totalPhotosCount } = data.payload;
            document.querySelector('tbody').innerHTML = photoListHtml;
            document.querySelector('.pagination').innerHTML = paginationHtml;
            document.getElementById('downloaded-count').textContent = downloadedCount;
            document.getElementById('not-downloaded-count').textContent = notDownloadedCount;
            document.getElementById('all-count').textContent = totalPhotosCount;
            return;
          }

          if (data.type === 'page-changed') {
            const { photoListHtml, paginationHtml } = data.payload;
            document.querySelector('tbody').innerHTML = photoListHtml;
            document.querySelector('.pagination').innerHTML = paginationHtml;
            return;
          }

          if (data.error) {
            progressText.textContent = `Error: ${data.error}`;
            return;
          }

          if (data.fileComplete) {
            const downloadedCountSpan = document.getElementById('downloaded-count');
            const notDownloadedCountSpan = document.getElementById('not-downloaded-count');
            if (downloadedCountSpan && notDownloadedCountSpan) {
              downloadedCountSpan.textContent = data.downloadedCount;
              notDownloadedCountSpan.textContent = data.notDownloadedCount;
            }
          }

          if (data.downloadProgress !== undefined) {
            downloadBar.style.width = `${data.downloadProgress}%`;
            downloadBar.textContent = `${data.downloadProgress}%`;
          }

          if (data.uploadProgress !== undefined) {
            uploadBar.style.width = `${data.uploadProgress}%`;
            uploadBar.textContent = `${data.uploadProgress}%`;
          }

          if (data.totalProgress !== undefined) {
            totalProgressBar.style.width = `${data.totalProgress}%`;
            totalProgressBar.textContent = `${data.totalProgress}%`;
          }

          if (data.message) {
            progressText.textContent = data.message;
          }

          if (data.complete) {
            downloadBar.style.width = "100%";
            downloadBar.textContent = "100%";
            uploadBar.style.width = "100%";
            uploadBar.textContent = "100%";
            totalProgressBar.style.width = "100%";
            totalProgressBar.textContent = "100%";
            ws.close();
            setTimeout(() => {
              window.location.reload();
            }, 2000);
          }
        };

        ws.onclose = () => {
          console.log("WebSocket connection closed");
        };

        ws.onerror = (error) => {
          console.error("WebSocket error:", error);
          progressText.textContent =
            "An error occurred. Check the console for details.";
        };
      }

      function toggleClearButton() {
        const searchInput = document.getElementById('search-input');
        const clearButton = document.getElementById('clear-search-btn');
        if (searchInput.value) {
          clearButton.style.display = 'block';
        } else {
          clearButton.style.display = 'none';
        }
      }

      window.addEventListener('DOMContentLoaded', (event) => {
        toggleClearButton();
        const downloadState = <%- JSON.stringify(downloadState) %>;
        if (downloadState.inProgress) {
          document.getElementById('download-progress').style.display = 'block';
          document.querySelector('.progress-bar-container').style.display = 'block';
          document.getElementById('progress-text').style.display = 'block';
          connectWebSocket();
        }
      });

      function cancelDownload() {
        if (ws && ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify({ type: 'cancel-download' }));
        }
      }

      function downloadSinglePhoto(photoId) {
        document.getElementById('download-progress').style.display = 'block';
        document.querySelector('.progress-bar-container').style.display = 'block';
        document.getElementById('progress-text').style.display = 'block';
        connectWebSocket();
        if (ws && ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify({ type: 'download-photo', payload: { photoId } }));
        } else {
          ws.onopen = () => {
            ws.send(JSON.stringify({ type: 'download-photo', payload: { photoId } }));
          };
        }
      }

      <% if (isLoggedIn) { %>
      function confirmDownload() {
        const missingPhotosCount = <%= missingPhotosCount %>;
        if (missingPhotosCount > 10) {
          if (!confirm(`You are about to download ${missingPhotosCount} photos. Are you sure you want to proceed?`)) {
            return;
          }
        }
        document.getElementById('download-progress').style.display = 'block';
        document.querySelector('.progress-bar-container').style.display = 'block';
        document.getElementById('progress-text').style.display = 'block';
        connectWebSocket();
        if (ws && ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify({ type: 'download' }));
        } else {
          ws.onopen = () => {
            ws.send(JSON.stringify({ type: 'download' }));
          };
        }
      }

      function updatePhotoList() {
          const updateBtn = document.getElementById('update-btn');
          updateBtn.disabled = true;
          updateBtn.innerHTML = '<div class="spinner"></div><span>Starting...</span>';

          connectWebSocket();

          if (ws && ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify({ type: 'update-photo-list' }));
          } else {
            ws.onopen = () => {
              ws.send(JSON.stringify({ type: 'update-photo-list' }));
            };
          }
      }
      <% } %>

      document
        .getElementById("toggle-drive-only-list")
        ?.addEventListener("click", function () {
          this.classList.toggle("active");
          var panel = document.getElementById("drive-only-list");
          if (panel.style.maxHeight) {
            panel.style.maxHeight = null;
          } else {
            panel.style.maxHeight = panel.scrollHeight + "px";
          }
        });

      document.getElementById('toggle-duplicate-files-list')?.addEventListener('click', function() {
        this.classList.toggle("active");
        var panel = document.getElementById('duplicate-files-list');
        if (panel.style.maxHeight) {
          panel.style.maxHeight = null;
        } else {
          panel.style.maxHeight = panel.scrollHeight + "px";
        }
      });

      document.getElementById('delete-duplicate-files')?.addEventListener('click', function() {
        const duplicateFiles = <%- JSON.stringify(duplicateFiles) %>;
        const fileIdsToDelete = [];
        for (const filename in duplicateFiles) {
          const files = duplicateFiles[filename];
          for (let i = 1; i < files.length; i++) {
            fileIdsToDelete.push(files[i].id);
          }
        }

        if (fileIdsToDelete.length > 0 && confirm(`Are you sure you want to delete ${fileIdsToDelete.length} duplicate files?`)) {
          connectWebSocket();
          if (ws && ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify({ type: 'delete-duplicates', payload: { fileIds: fileIdsToDelete } }));
          } else {
            ws.onopen = () => {
              ws.send(JSON.stringify({ type: 'delete-duplicates', payload: { fileIds: fileIdsToDelete } }));
            };
          }
        }
      });
    </script>
  </body>
</html>
